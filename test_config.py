#!/usr/bin/env python3
"""
Teste do sistema de configura√ß√£o.
Valida se todas as configura√ß√µes est√£o funcionando corretamente.
"""
import os
import sys
import tempfile
from pathlib import Path
from typing import Dict, Any

def test_env_loading():
    """Testa carregamento de vari√°veis de ambiente."""
    print("üß™ Testando carregamento de .env...")
    
    # Cria arquivo .env tempor√°rio
    test_content = """
# Teste de configura√ß√£o
TELEGRAM_BOT_TOKEN=123456789:test_token
API_PORT=9999
API_DEBUG=true
LLM_TEMPERATURE=0.5
DATABASE_URL=sqlite:///test.db
LOG_LEVEL=DEBUG
"""
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.env', delete=False) as f:
        f.write(test_content)
        temp_env_file = f.name
    
    try:
        # Tenta carregar python-dotenv
        try:
            from dotenv import load_dotenv
            load_dotenv(temp_env_file)
            dotenv_available = True
        except ImportError:
            dotenv_available = False
            print("‚ö†Ô∏è  python-dotenv n√£o dispon√≠vel")
        
        if dotenv_available:
            # Verifica se vari√°veis foram carregadas
            token = os.getenv('TELEGRAM_BOT_TOKEN')
            port = os.getenv('API_PORT')
            debug = os.getenv('API_DEBUG')
            
            if token == '123456789:test_token':
                print("  ‚úÖ TELEGRAM_BOT_TOKEN carregado corretamente")
            else:
                print(f"  ‚ùå TELEGRAM_BOT_TOKEN incorreto: {token}")
            
            if port == '9999':
                print("  ‚úÖ API_PORT carregado corretamente")
            else:
                print(f"  ‚ùå API_PORT incorreto: {port}")
            
            if debug == 'true':
                print("  ‚úÖ API_DEBUG carregado corretamente")
            else:
                print(f"  ‚ùå API_DEBUG incorreto: {debug}")
        
        return dotenv_available
    
    finally:
        # Remove arquivo tempor√°rio
        os.unlink(temp_env_file)

def test_config_validation():
    """Testa valida√ß√£o de configura√ß√µes."""
    print("\nüß™ Testando valida√ß√£o de configura√ß√µes...")
    
    # Simula configura√ß√µes v√°lidas
    valid_configs = {
        'TELEGRAM_BOT_TOKEN': '123456789:ABCDEF1234567890',
        'API_PORT': '8000',
        'API_SECRET_KEY': 'chave-com-mais-de-16-caracteres',
        'LLM_TEMPERATURE': '0.7',
        'LLM_MAX_TOKENS': '2000',
        'LOG_LEVEL': 'INFO',
        'DATABASE_URL': 'sqlite:///./data/test.db'
    }
    
    # Simula configura√ß√µes inv√°lidas
    invalid_configs = {
        'TELEGRAM_BOT_TOKEN': 'token_invalido',
        'API_PORT': '999',  # Porta muito baixa
        'API_SECRET_KEY': 'curta',  # Muito curta
        'LLM_TEMPERATURE': '2.0',  # Muito alta
        'LLM_MAX_TOKENS': '10000',  # Muito alto
        'LOG_LEVEL': 'INVALID',
    }
    
    print("  üìã Testando configura√ß√µes v√°lidas...")
    valid_count = 0
    for key, value in valid_configs.items():
        os.environ[key] = value
        # Aqui voc√™ faria a valida√ß√£o real
        print(f"    ‚úÖ {key}: {value}")
        valid_count += 1
    
    print(f"  ‚úÖ {valid_count}/{len(valid_configs)} configura√ß√µes v√°lidas testadas")
    
    print("  üìã Testando configura√ß√µes inv√°lidas...")
    invalid_count = 0
    for key, value in invalid_configs.items():
        # Aqui voc√™ testaria se a valida√ß√£o detecta o erro
        print(f"    ‚ö†Ô∏è  {key}: {value} (deveria ser inv√°lido)")
        invalid_count += 1
    
    print(f"  ‚úÖ {invalid_count}/{len(invalid_configs)} configura√ß√µes inv√°lidas testadas")
    
    return True

def test_directory_creation():
    """Testa cria√ß√£o de diret√≥rios."""
    print("\nüß™ Testando cria√ß√£o de diret√≥rios...")
    
    required_dirs = ['logs', 'data', 'cache']
    
    for dir_name in required_dirs:
        dir_path = Path(dir_name)
        
        if dir_path.exists():
            print(f"  ‚úÖ {dir_name}/ j√° existe")
        else:
            try:
                dir_path.mkdir(parents=True, exist_ok=True)
                print(f"  ‚úÖ {dir_name}/ criado com sucesso")
            except Exception as e:
                print(f"  ‚ùå Erro ao criar {dir_name}/: {e}")
                return False
    
    return True

def test_file_structure():
    """Testa estrutura de arquivos."""
    print("\nüß™ Testando estrutura de arquivos...")
    
    required_files = [
        'requirements.txt',
        '.env.example',
        'config.py',
        'setup.py',
        'validate_config.py',
        'tasks.py',
        'start_bot.py',
    ]
    
    optional_files = [
        '.env',
        'BOT_README.md',
        'INSTRUCOES_FINAIS.md',
    ]
    
    for file_path in required_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path} (obrigat√≥rio)")
            return False
    
    for file_path in optional_files:
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ö†Ô∏è  {file_path} (opcional)")
    
    return True

def test_import_dependencies():
    """Testa importa√ß√£o de depend√™ncias."""
    print("\nüß™ Testando depend√™ncias Python...")
    
    core_deps = {
        'fastapi': 'FastAPI',
        'pydantic': 'Pydantic',
        'pydantic_settings': 'Pydantic Settings',
        'uvicorn': 'Uvicorn',
    }
    
    optional_deps = {
        'openai': 'OpenAI',
        'anthropic': 'Anthropic',
        'requests': 'Requests',
        'httpx': 'HTTPX',
        'loguru': 'Loguru',
        'python-telegram-bot': 'Python Telegram Bot',
    }
    
    for module, name in core_deps.items():
        try:
            __import__(module.replace('-', '_'))
            print(f"  ‚úÖ {name}")
        except ImportError:
            print(f"  ‚ùå {name} (obrigat√≥rio)")
            return False
    
    for module, name in optional_deps.items():
        try:
            __import__(module.replace('-', '_'))
            print(f"  ‚úÖ {name}")
        except ImportError:
            print(f"  ‚ö†Ô∏è  {name} (opcional)")
    
    return True

def test_config_module():
    """Testa m√≥dulo de configura√ß√£o."""
    print("\nüß™ Testando m√≥dulo config.py...")
    
    try:
        # Tenta importar o m√≥dulo de configura√ß√£o
        sys.path.insert(0, str(Path.cwd()))
        
        try:
            import config
            print("  ‚úÖ config.py importado com sucesso")
            
            # Testa se tem as classes principais
            if hasattr(config, 'Settings'):
                print("  ‚úÖ Classe Settings encontrada")
            else:
                print("  ‚ùå Classe Settings n√£o encontrada")
                return False
            
            if hasattr(config, 'settings'):
                print("  ‚úÖ Inst√¢ncia global 'settings' encontrada")
            else:
                print("  ‚ùå Inst√¢ncia global 'settings' n√£o encontrada")
                return False
            
        except ImportError as e:
            print(f"  ‚ùå Erro ao importar config.py: {e}")
            return False
    
    except Exception as e:
        print(f"  ‚ùå Erro inesperado: {e}")
        return False
    
    return True

def main():
    """Fun√ß√£o principal."""
    print("üöÄ Teste do Sistema de Configura√ß√£o - Celes.ia")
    print("=" * 60)
    
    tests = [
        ("Carregamento de .env", test_env_loading),
        ("Valida√ß√£o de configura√ß√µes", test_config_validation),
        ("Cria√ß√£o de diret√≥rios", test_directory_creation),
        ("Estrutura de arquivos", test_file_structure),
        ("Depend√™ncias Python", test_import_dependencies),
        ("M√≥dulo config.py", test_config_module),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erro durante teste '{test_name}': {e}")
            results.append((test_name, False))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {test_name:<30} {status}")
        if result:
            passed += 1
    
    print("-" * 60)
    print(f"Total: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sistema de configura√ß√£o est√° funcionando perfeitamente")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
        print("üí° Verifique os erros acima e execute:")
        print("   python tasks.py install  # Para instalar depend√™ncias")
        print("   python tasks.py setup    # Para configurar o projeto")
        return 1

if __name__ == "__main__":
    sys.exit(main())
